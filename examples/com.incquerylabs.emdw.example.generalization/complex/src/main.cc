/******************************************************************************
 * 
 * M A I N
 * 
 * NAME: main
 * 
 * Generated by EMDW-MC
 * 
 ******************************************************************************/


#include "GeneralizationTest/Component/Component_def.hh"

int main(int , char **) {
    using namespace ::GeneralizationTest::Component;

    ::std::cout << "Create B as A ***********************" << ::std::endl;
    A* _ab = new B();
    ::std::cout << "Create B as B ***********************" << ::std::endl;
    B* _bb = new B();
    ::std::cout << "Create G as G ***********************" << ::std::endl;
    G* _gg = new G();
    ::std::cout << "Create D as D ***********************" << ::std::endl;
    D* _dd = new D();
    ::std::cout << "Create E as D ***********************" << ::std::endl;
    D* _de = new E();
    ::std::cout << "Create E as E ***********************" << ::std::endl;
    E* _ee = new E();
    ::std::cout << "Create E as A ***********************" << ::std::endl;
    A* _ae = new E();
    ::std::cout << "Create F as C ***********************" << ::std::endl;
    C* _cf = new F();
    ::std::cout << "Create H as H ***********************" << ::std::endl;
    H* _hh = new H();
    ::std::cout << "Create I as I ***********************" << ::std::endl;
    I* _ii = new I();
    ::std::cout << "Create J as J ***********************" << ::std::endl;
    J* _jj = new J();


    ::std::cout << ::std::endl;

    ::std::cout << "Call __get_static_type_number on B as A ***********************" << ::std::endl;
    ::std::cout << _ab->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on B as A ***********************" << ::std::endl;
    ::std::cout << _ab->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_static_type_number on D as D ***********************" << ::std::endl;
    ::std::cout << _dd->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on D as D ***********************" << ::std::endl;
    ::std::cout << _dd->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_static_type_number on E as D ***********************" << ::std::endl;
    ::std::cout << _de->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on E as D ***********************" << ::std::endl;
    ::std::cout << _de->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_static_type_number on E as E ***********************" << ::std::endl;
    ::std::cout << _ee->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on E as E ***********************" << ::std::endl;
    ::std::cout << _ee->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_static_type_number on E as A ***********************" << ::std::endl;
    ::std::cout << _ae->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on E as A ***********************" << ::std::endl;
    ::std::cout << _ae->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_static_type_number on F as C ***********************" << ::std::endl;
    ::std::cout << _cf->__get_static_type_number().getId() << ::std::endl;
    ::std::cout << "Call __get_dynamic_type_number on F as C ***********************" << ::std::endl;
    ::std::cout << _cf->__get_dynamic_type_number().getId() << ::std::endl;
    ::std::cout << "Call b_operation on B as B ***********************" << ::std::endl;
    _bb->b_operation();
    ::std::cout << "Call c_operation on G as G ***********************" << ::std::endl;
    _gg->c_operation();
    ::std::cout << "Call d_operation on D as D ***********************" << ::std::endl;
    _dd->d_operation();
    ::std::cout << "Call d_operation on E as D ***********************" << ::std::endl;
    _de->d_operation();
    ::std::cout << "Call c_operation on F as C ***********************" << ::std::endl;
    _cf->c_operation();
    ::std::cout << "Call d_operation on E as E ***********************" << ::std::endl;
    _ee->d_operation();
    ::std::cout << "Call d_operation on H as H ***********************" << ::std::endl;
    _hh->d_operation();
    ::std::cout << "Call d_operation on I as I ***********************" << ::std::endl;
    _ii->d_operation();
    ::std::cout << "Call c_operation on J as J ***********************" << ::std::endl;
    _jj->c_operation(true);
}

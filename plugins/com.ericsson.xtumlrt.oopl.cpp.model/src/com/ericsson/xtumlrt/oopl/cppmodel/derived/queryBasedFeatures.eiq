/*******************************************************************************
 * Copyright (c) 2015-2016, IncQuery Labs Ltd. and Ericsson AB
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Akos Horvath, Abel Hegedus, Zoltan Ujhelyi, Daniel Segesdi, Tamas Borbas, Robert Doczi, Peter Lunk, Adam Balogh - initial API and implementation
 *******************************************************************************/
package com.ericsson.xtumlrt.oopl.cppmodel.derived

import "http://www.eclipse.org/emf/2002/Ecore"

import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"
import "http://www.eclipse.org/papyrusrt/xtumlrt/common"

@QueryBasedFeature(feature = "type")
pattern cppAttributeType(
	source : CPPAttribute,
	target : OOPLDataType
) {
	find cppAttributeUnnamedSequenceType(source, target);
} or {
	CPPAttribute.commonAttribute.type(source, commonType);
	OOPLDataType.commonType(target, commonType);
	neg find cppAttributeUnnamedSequenceType(source, _sequence);
}

@QueryBasedFeature(feature = "type")
pattern cppFormalParameterType(
	source : CPPFormalParameter,
	target : OOPLDataType
) {
	find cppFormalParameterUnnamedSequenceType(source, target);
} or {
	CPPFormalParameter.subElements(source, target);
	CPPFormalParameter.commonParameter.type(source, commonType);
	OOPLDataType.commonType(target, commonType);
	find referenceType(target);
} or {
	CPPFormalParameter.commonParameter.type(source, commonType);
	OOPLDataType.commonType(target, commonType);
	neg find cppFormalParameterUnnamedSequenceType(source, _sequence);
	neg find referenceType(target);
}

@QueryBasedFeature(feature = "type")
pattern cppReturnValueType(
	source : CPPReturnValue,
	target : OOPLDataType
) {
	find cppReturnValueUnnamedSequenceType(source, target);
} or {
	CPPReturnValue.subElements(source, target);
	CPPReturnValue.commonTypedMultiplicityElement.type(source, commonType);
	OOPLDataType.commonType(target, commonType);
	find referenceType(target);
} or {
	CPPReturnValue.commonTypedMultiplicityElement.type(source, commonType);
	OOPLDataType.commonType(target, commonType);
	neg find cppReturnValueUnnamedSequenceType(source, _sequence);
	neg find referenceType(target);
}

private pattern referenceType(
	referenceType : OOPLDataType
) {
	CPPClassReference(referenceType);
} or {
	CPPClassRefSimpleCollection(referenceType);
} or {
	CPPClassRefAssocCollection(referenceType);
}

@QueryBasedFeature(feature = "cppName")
pattern cppNamedElementCppName(
	source : CPPNamedElement,
	target
) {
	CPPNamedElement.ooplNameProvider(source, provider);
	OOPLExistingNameProvider.commonNamedElement(provider, element);
	find namedElementPurifiedName(element, target);
} or {
	CPPNamedElement.ooplNameProvider(source, provider);
	OOPLDerivedNameProvider.name(provider, target);
}

pattern ooplDerivedNamePurifiedName(
	namedElement : OOPLDerivedNameProvider,
	purifiedName
) {
	OOPLDerivedNameProvider.name(namedElement, name);
	purifiedName == eval (CPPNamePurifier.purifyName(name));
}

pattern namedElementPurifiedName(
	namedElement : NamedElement,
	purifiedName
) {
	NamedElement.name(namedElement, name);
	purifiedName == eval (CPPNamePurifier.purifyName(name));
}

@QueryBasedFeature(feature = "cppPrefix")
pattern cppQualifiedNamedElementCppPrefix(
	source : CPPQualifiedNamedElement,
	target
) {
	find cppQualifiedNamedElementParentChild(parent, source);
	find cppQualifiedNamedElementCppQualifiedName(parent, parentQN);
	target == eval(parentQN + "::");
} or {
	neg find cppQualifiedNamedElementParentChild(_, source);
	target == "::";
}

@QueryBasedFeature(feature = "cppQualifiedName")
pattern cppQualifiedNamedElementCppQualifiedName(
	source : CPPQualifiedNamedElement,
	target
) {
	find cppQualifiedNamedElementParentChild(parent, source);
	find cppQualifiedNamedElementCppQualifiedName(parent, parentQN);
	find cppNamedElementCppName(source, name);
	target == eval(parentQN + "::" + name);
} or {
	neg find cppQualifiedNamedElementParentChild(_, source);
	find cppNamedElementCppName(source, name);
	target == eval("::" + name);
}


pattern cppQualifiedNamedElementParentChild(
	parent : CPPQualifiedNamedElement,
	child : CPPQualifiedNamedElement
) {
	CPPQualifiedNamedElement.subElements(parent, child);
}

@QueryBasedFeature(feature = "name")
pattern cppDirectoryName(
	source : CPPDirectory,
	target
) {
	find cppNamedElementCppName(component, target);
	CPPComponent.headerDirectory(component, source);
} or {
	find cppNamedElementCppName(component, target);
	CPPComponent.bodyDirectory(component, source);
} or {
	find cppNamedElementCppName(component, target);
	CPPComponent.externalHeaderDirectory(component, source);
} or {
	find cppNamedElementCppName(component, target);
	CPPComponent.externalBodySkeletonDirectory(component, source);
} or {
	find cppNamedElementCppName(model, target);
	CPPModel.headerDir(model, source);
	find sameModelDirectory(model);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.headerDir(model, source);
	neg find sameModelDirectory(model);
	target == eval("headers/" + cppName);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.bodyDir(model, source);
	neg find sameModelDirectory(model);
	target == eval("bodies/" + cppName);
} or {
	find cppNamedElementCppName(model, target);
	CPPModel.externalHeaderDir(model, source);
	find sameModelExternalDirectory(model);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.externalHeaderDir(model, source);
	neg find sameModelExternalDirectory(model);
	target == eval("headers/" + cppName);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.externalBodySkeletonDir(model, source);
	neg find sameModelExternalDirectory(model);
	target == eval("headers/" + cppName);
} or {
	find cppNamedElementCppName(pack, target);
	CPPPackage.headerDir(pack, source);
} or {
	find cppNamedElementCppName(pack, target);
	CPPPackage.bodyDir(pack, source);
}

private pattern sameModelDirectory(model : CPPModel) {
	CPPModel.headerDir(model, dir);
	CPPModel.bodyDir(model, dir);
}

private pattern sameModelExternalDirectory(model : CPPModel) {
	CPPModel.externalHeaderDir(model, dir);
	CPPModel.externalBodySkeletonDir(model, dir);
}

@QueryBasedFeature(feature = "parentDirectory")
pattern cppDirectoryParentDirectory(
	source : CPPDirectory,
	target
) {
	find cppDirectoryParentChild(parent, source);
	find cppDirectoryName(parent, target);
} or {
	neg find cppDirectoryParentChild(_parent, source);
	target == "";
}

@QueryBasedFeature(feature = "path")
pattern cppDirectoryPath(
	source : CPPDirectory,
	target
) {
	find cppDirectoryParentChild(parent, source);
	find cppDirectoryPath(parent, prefix);
	find cppDirectoryName(source, name);
	target == eval(prefix + "/" + name);
} or {
	neg find cppDirectoryParentChild(_, source);
	find cppDirectoryName(source, target);
}

pattern cppDirectoryParentChild(
	parent : CPPDirectory,
	child : CPPDirectory
) {
	CPPDirectory.subDirectories(parent, child);
}

@QueryBasedFeature(feature = "generationName")
pattern cppSourceFileGenerationName(
	source : CPPSourceFile,
	target
) {
	find cppNamedElementCppName(class, cppName);
	CPPClass.headerFile(class, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(class, cppName);
	CPPClass.bodyFile(class, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);	
} or {
	find cppNamedElementCppName(externalBridge, cppName);
	CPPExternalBridge.headerFile(externalBridge, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(externalBridge, cppName);
	CPPExternalBridge.bodyFile(externalBridge, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);	
} or {
	find cppNamedElementCppName(component, cppName);
	CPPComponent.mainHeaderFile(component, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_main" + ext);
} or {
	find cppNamedElementCppName(component, cppName);
	CPPComponent.declarationHeaderFile(component, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_decl" + ext);
} or {
	find cppNamedElementCppName(component, cppName);
	CPPComponent.definitionHeaderFile(component, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName +"_def" + ext);
} or {
	find cppNamedElementCppName(component, cppName);
	CPPComponent.mainBodyFile(component, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName+ "_main" + ext);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.declarationHeaderFile(model, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_decl" + ext);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.definitionHeaderFile(model, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_def" + ext);
} or {
	find cppNamedElementCppName(model, cppName);
	CPPModel.apiHeaderFile(model, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_api" + ext);
} or {
	find cppNamedElementCppName(pack, cppName);
	CPPPackage.headerFile(pack, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(pack, cppName);
	CPPPackage.bodyFile(pack, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(port, cppName);
	CPPPort.headerFile(port, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(port, cppName);
	CPPPort.externalHeaderFile(port, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_impl" + ext);
} or {
	find cppNamedElementCppName(port, cppName);
	CPPPort.bodyFile(port, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	find cppNamedElementCppName(port, cppName);
	CPPPort.externalBodySkeletonFile(port, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + "_impl" + ext + "_skel");
} or {
	find cppNamedElementCppName(protocol, cppName);
	CPPProtocol.headerFile(protocol, source);
	find cppSourceFileExtension(source, ext);
	target == eval(cppName + ext);
} or {
	CPPMakeFile(source);
	neg find directoryMakeRulesFile(source);
	target == "Makefile";
} or {
	find directoryMakeRulesFile(source);
	target == "Rules.mk";
}

private pattern directoryMakeRulesFile(makeFile : CPPMakeFile) {
	CPPDirectory.makeRulesFile(_directory, makeFile);
}

pattern cppSourceFileExtension(
	source : CPPSourceFile,
	ext
) {
	CPPHeaderFile(source);
	ext == ".hh";
} or {
	CPPBodyFile(source);
	neg find externalBridgeBodyFileWithoutExternalNamespace(_bridge, source);
	ext == ".cc";
} or {
	CPPBodyFile(source);
	find externalBridgeBodyFileWithoutExternalNamespace(_bridge, source);
	ext == ".cc.skel";
}

@QueryBasedFeature(feature = "generationDirectory")
pattern cppSourceFileGenerationDirectory(
	source : CPPSourceFile,
	target
) {
	CPPDirectory.files(directory, source);
	find cppDirectoryPath(directory, target);
}

@QueryBasedFeature(feature = "generationPath")
pattern cppSourceFileGenerationPath(
	source : CPPSourceFile,
	target
) {
	find cppSourceFileGenerationDirectory(source, includeDirectory);
	find cppSourceFileGenerationName(source, includeName);
	target == eval(includeDirectory + "/" + includeName);
}

@QueryBasedFeature(feature = "includeName")
pattern cppHeaderFileIncludeName(
	source : CPPHeaderFile,
	target
) {
	find cppSourceFileGenerationName(source, target);
}

@QueryBasedFeature(feature = "includeDirectory")
pattern cppHeaderFileIncludeDirectory(
	source : CPPHeaderFile,
	target
) {
	find cppSourceFileGenerationDirectory(source, target);
}

@QueryBasedFeature(feature = "includePath")
pattern cppHeaderFileIncludePath(
	source : CPPHeaderFile,
	target
) {
	find cppSourceFileGenerationPath(source, target);
}

@QueryBasedFeature(feature = "cppContainer")
pattern cppClassRefSimpleCollectionCppContainer(
	source : CPPClassRefSimpleCollection,
	target
) {
	CPPClassRefSimpleCollection.implementation.containerQualifiedName(source, target);
}

@QueryBasedFeature(feature = "cppContainer")
pattern cppSequenceCppContainer(
	source : CPPSequence,
	target
) {
	CPPSequence.implementation.containerQualifiedName(source, target);
}

pattern cppSequenceType(
	cppSequence : CPPSequence,
	ooplType : OOPLDataType
) {
	CPPSequence.elementType(cppSequence, ooplType);
}

pattern cppAttributeUnnamedSequenceType(
	cppAttribute : CPPAttribute,
	cppSequence : CPPSequence
) {
	CPPAttribute.unnamedSequenceType(cppAttribute, cppSequence);
}

pattern cppFormalParameterUnnamedSequenceType(
	cppFormalParameter : CPPFormalParameter,
	cppSequence : CPPSequence
) {
	CPPFormalParameter.unnamedSequenceType(cppFormalParameter, cppSequence);
}

pattern cppReturnValueUnnamedSequenceType(
	cppReturnValue : CPPReturnValue,
	cppSequence : CPPSequence
) {
	CPPReturnValue.unnamedSequenceType(cppReturnValue, cppSequence);
}

pattern externalBridgeBodyFileWithoutExternalNamespace(
	cppExternalBridge : CPPExternalBridge,
	cppBodyFile : CPPBodyFile
) {
	CPPExternalBridge.bodyFile(cppExternalBridge, cppBodyFile);
	neg find externalBridgeWithExternalNamespace(cppExternalBridge);
}

pattern externalBridgeWithExternalNamespace(
	cppExternalBridge : CPPExternalBridge
) {
	CPPExternalBridge.cppExternalNamespace(cppExternalBridge, cppExternalNamespace);
	cppExternalNamespace != "";
}

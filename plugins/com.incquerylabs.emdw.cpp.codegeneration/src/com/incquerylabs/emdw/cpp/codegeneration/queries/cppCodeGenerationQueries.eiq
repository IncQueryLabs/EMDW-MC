package com.incquerylabs.emdw.cpp.codegeneration.queries

import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/xtuml"
import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"

// xtUML to cppmodel mappings
pattern cppComponents(
	xtComponent : XTComponent,
	cppComponent : CPPComponent
) {
	CPPComponent.xtComponent(cppComponent, xtComponent);
}

pattern cppClasses(
	xtClass : XTClass,
	cppClass : CPPClass
) {
	CPPClass.xtClass(cppClass, xtClass);
}

pattern cppSuperClasses(
	cppClass : CPPClass,
	cppSuperClass : CPPClass
) {
	CPPClass.xtClass(cppClass, xtClass);
	XTClass.generalizations(xtClass, generalization);
	Generalization.^super(generalization, xtSuperClass);
	CPPClass.xtClass(cppSuperClass, xtSuperClass);
}

// Elements directly in containers
pattern cppClassInQualifiedNamedElement(
	cppClass : CPPClass,
	container : CPPQualifiedNamedElement
) {
	CPPQualifiedNamedElement.subElements(container, cppClass);
}

pattern cppPackageInQualifiedNamedElement(
	cppPackage : CPPPackage,
	container : CPPQualifiedNamedElement
) {
	CPPQualifiedNamedElement.subElements(container, cppPackage);
}

pattern cppClassInComponent(
	cppClass : CPPClass,
	cppComponent : CPPComponent
) {
	find cppClassInQualifiedNamedElement(cppClass, cppComponent);
}

pattern cppClassInPackage(
	cppClass : CPPClass,
	cppPackage : CPPPackage
) {
	find cppClassInQualifiedNamedElement(cppClass, cppPackage);
}

pattern cppPackageInComponent(
	cppPackage : CPPPackage,
	cppComponent : CPPComponent
) {
	find cppPackageInQualifiedNamedElement(cppPackage, cppComponent);
}

pattern cppPackageInPackage(
	outerPackage : CPPPackage,
	innerPackage : CPPPackage
) {
	find cppPackageInQualifiedNamedElement(innerPackage, outerPackage);
}

// Elements in a package hierarchy
pattern cppClassInComponentSubPackages(
	cppClass : CPPClass,
	cppComponent : CPPComponent
) {
	find cppClassInComponent(cppClass, cppComponent);
} or {
	find cppPackageInComponent(cppPackage, cppComponent);
	find cppClassInPackageSubPackages(cppClass, cppPackage);
}

pattern cppClassInPackageSubPackages(
	cppClass : CPPClass,
	cppPackage : CPPPackage
) {
	find cppClassInPackage(cppClass, cppPackage);
} or {
	find cppPackageInPackage+(cppPackage, subPackage);
	find cppClassInPackage(cppClass, subPackage);
}

pattern cppComponentStateMachines(
	cppComponent : CPPComponent,
	stateMachine : StateMachine
) {
	find cppClassInComponentSubPackages(cppClass, cppComponent);
	find cppClassStateMachine(_, cppClass, stateMachine);
}

// Elements of Classes
pattern cppClassStateMachine(
	xtClass : XTClass,
	cppClass : CPPClass,
	statemachine : StateMachine
) {
	XTClass.behaviour(xtClass, statemachine);
	find cppClasses(xtClass, cppClass);
}

pattern cppClassAttributes(
	cppClass : CPPClass,
	cppAttribute : CPPAttribute,
	visibility : VisibilityKind
) {
	CPPClass.subElements(cppClass, cppAttribute);
	CPPAttribute.commonAttribute(cppAttribute, attribute);
	Attribute.visibility(attribute, visibility);
}

pattern cppClassClassReferenceStorages(
	cppClass : CPPClass,
	cppClassReferenceStorage : CPPClassReferenceStorage
) {
	CPPClass.subElements(cppClass, cppRelation);
	find cppRelationReferenceStorage(cppRelation, cppClassReferenceStorage);
}

pattern cppClassOperations(
	cppClass : CPPClass,
	cppOperation : CPPOperation,
	visibility : VisibilityKind
) {
	CPPClass.subElements(cppClass, cppOperation);
	CPPOperation.commonOperation(cppOperation, operation);
	Operation.visibility(operation, visibility);
}

pattern cppVirtualOperation(
	cppClass : CPPClass,
	cppOperation : CPPOperation,
	cppOverridingOperation : CPPOperation
) {
	find cppClassOperations(cppClass, cppOperation, _);
	find cppSuperClasses+(cppSubClass, cppClass);
	find cppClassOperations(cppSubClass, cppOverridingOperation, _);
	CPPOperation.commonOperation.name(cppOperation, cppOperationName);
	CPPOperation.commonOperation.name(cppOverridingOperation, cppOperationName);
}

pattern cppRelationReferenceStorage(
	cppRelation: CPPRelation,
	cppReferenceStorage: CPPClassReferenceStorage
){
	CPPRelation.referenceStorage(cppRelation, cppReferenceStorage);
}

// Elements of StateMachines
pattern stateMachineStates(
	stateMachine : StateMachine,
	state : State
) {
	StateMachine.top(stateMachine, top);
	find compositeStateSubStates+(top, state);
}

pattern compositeStateSubStates(
	compositeState : CompositeState,
	subState : State
) {
	CompositeState.substates(compositeState, subState);
}

pattern classStateMachineStates(
	xtClass : XTClass,
	cppClass : CPPClass,
	state : State
) {
	find cppClassStateMachine(xtClass, cppClass, statemachine);
	find stateMachineStates(statemachine, state);
}

pattern classStateMachineTransitions(
	xtClass : XTClass,
	cppClass : CPPClass,
	transition : Transition
) {
	find classStateMachineStates(xtClass, cppClass, state);
	CompositeState.transitions(state, transition);
}

pattern classStateMachineEvents(
	xtClass : XTClass,
	cppClass : CPPClass,
	event : XTEvent
) {
	find classStateMachineTransitions(xtClass, cppClass, transition);
	Transition.triggers(transition, trigger);
	XTEventTrigger.signal(trigger, event);
}

pattern cppEvents(
	xtClassEvent: XTEvent,
	cppEvent: CPPEvent
) {
	CPPEvent.xtEvent(cppEvent, xtClassEvent);
}

pattern cppTransitionInfo(
	cppTransition : CPPTransition,
	transition : Transition,
	cppSource : CPPState,
	cppTarget : CPPState	
) {
	CPPTransition.commonTransition(cppTransition, transition);
	CPPState.commonState(cppSource, source);
	CPPState.commonState(cppTarget, target);
	Transition.sourceVertex(transition, source);
	Transition.targetVertex(transition, target);
}

pattern transitionCppEvents(
	transition : Transition,
	cppEvent : CPPEvent
) {
	Transition.triggers(transition, trigger);
	XTEventTrigger.signal(trigger, xtClassEvent);
	XTClassEvent(xtClassEvent);
	CPPEvent.xtEvent(cppEvent, xtClassEvent);
}

pattern cppTransitionCppEvents(
	cppTransition : CPPTransition,
	cppEvent : CPPEvent
) {
	CPPTransition.commonTransition(cppTransition, transition);
	find transitionCppEvents(transition, cppEvent);
}

pattern cppStateIncomingCppEvents(
	cppState : CPPState,
	cppEvent : CPPEvent
) {
	CPPState.commonState(cppState, commonState);
	State.incomingTransitions(commonState, transition);
	find transitionCppEvents(transition, cppEvent);
}

pattern cppStateOutgoingCppEvents(
	cppState : CPPState,
	cppEvent : CPPEvent
) {
	CPPState.commonState(cppState, commonState);
	State.outgoingTransitions(commonState, transition);
	find transitionCppEvents(transition, cppEvent);
}

pattern cppParentEvent(
	childEvent : CPPEvent,
	parentEvent : CPPEvent
) {
	CPPEvent.xtEvent(childEvent, xtChildEvent);
	CPPEvent.xtEvent(parentEvent, xtParentEvent);
	XTClassEvent(xtParentEvent);
	XTClassEvent.redefines(xtChildEvent, xtParentEvent);
}

pattern cppAncestorEvent(
	childEvent : CPPEvent,
	ancestorEvent : CPPEvent
) {
	find cppParentEvent+(childEvent, ancestorEvent);
} or {
	childEvent == ancestorEvent;
}

pattern cppEventCommonAncestor(
	event1 : CPPEvent,
	event2 : CPPEvent,
	commonAncestor : CPPEvent,
	commonXtAncestor : XTClassEvent
) {
	find cppAncestorEvent(event1, commonAncestor);
	find cppAncestorEvent(event2, commonAncestor);
	find cppEvents(commonXtAncestor, commonAncestor);
}

pattern cppTransitionToTerminate(
	cppTransition : CPPTransition,
	transition : Transition,
	cppSource : CPPState
) {
	CPPTransition.commonTransition(cppTransition, transition);
	CPPState.commonState(cppSource, source);
	TerminatePoint(terminatePoint);
	Transition.sourceVertex(transition, source);
	Transition.targetVertex(transition, terminatePoint);
}

pattern cppClassInitState(
	cppClass : CPPClass,
	cppInitState : CPPState,
	initTrans : Transition
) {
	find cppClassStateMachine(_, cppClass, statemachine);
	StateMachine.top.initial(statemachine, initial);
	Transition.sourceVertex(initTrans, initial);
	Transition.targetVertex(initTrans, init);
	CPPState.commonState(cppInitState, init);
}

pattern cppClassFinalStates(
	cppClass : CPPClass,
	cppFinalState : CPPState
) {
	CPPClass.subElements(cppClass, cppFinalState);
	neg find cppTransitionInfo(_, _, cppFinalState, _);
}

pattern cppClassTerminatePoints(
	xtClass : XTClass,
	cppClass : CPPClass,
	terminatePoint : TerminatePoint
) {
	find cppClassStateMachine(xtClass, cppClass, stateMachine);
	find stateMachineTerminatePoints(stateMachine, terminatePoint);
}

pattern stateMachineTerminatePoints(
	stateMachine : StateMachine,
	terminatePoint : TerminatePoint
) {
	StateMachine.top(stateMachine, top);
	CompositeState.terminatepoint(top, terminatePoint);
} or {
	find stateMachineStates(stateMachine, compositeState);
	CompositeState.terminatepoint(compositeState, terminatePoint);
}

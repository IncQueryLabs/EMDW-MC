package com.incquerylabs.emdw.cpp.codegeneration.templates

import com.ericsson.xtumlrt.oopl.cppmodel.CPPDirectory
import java.util.List

class MakefileTemplates {
	
	def makefileTemplate(String modelname, List<String> otherSubDirs) '''
	##############################################################################
	# M A K E F I L E
	#
	# NAME: «modelname»
	#
	# Generated by EMDW-MC
	#
	##############################################################################
	
	CXX=g++
	LDFLAGS=
	MAKE=make
	«IF false»
	# IF HAS INCLUDED PROJECT
	CXXFLAGS=-O3 -Wall -Wextra -std=c++11 -I. -I(../)*[INCLUDED_PROJECT]/
	LIBPATH=-L"(../)*[INCLUDED_PROJECT]/[Release/Debug]" -Wl,-rpath,"(../)*[INCLUDED_PROJECT]/[Release/Debug]"
	LIBS=$(LIBPATH) -l[INCLUDED_PROJECT]
	«ELSE»
	CXXFLAGS=-O3 -Wall -Wextra -std=c++11 -I.
	LIBS=-lrt
	«ENDIF»
	
	COMPILE=$(CXX) $(CXXFLAGS) -c -o $@ $<
	LINK=$(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)
	
	.SUFFIXES:
	.SUFFIXES: .cc .hh .o
	
	EXTERNALDIRS := $(subst ;, ,$(EMDW_EXTERNAL_SOURCE_DIR))
	
	SOURCES := $(wildcard *.cc)
	SOURCES += $(wildcard $(addsuffix /*.cc,$(EXTERNALDIRS)))
	OBJECTS := $(SOURCES:%.cc=%.o)
	BINARY := «modelname».out
	
	d :=	.
	
	«FOR subDir : otherSubDirs»
	dir := 	$(d)/«subDir»
	include $(dir)/Rules.mk
	«ENDFOR»
	
	%.o:	%.cc
			$(COMPILE)
			
	$(BINARY): $(OBJECTS)
			$(LINK)
			
	.PHONY: all
	all: $(SOURCES) $(OBJECTS) $(BINARY)
	
	.PHONY: clean
	clean:
		rm -f $(OBJECTS) $(BINARY)
	'''
	
	def rulesMkTemplate(CPPDirectory dir)'''
	##############################################################################
	# [M O D E L / C O M P O N E N T / P A C K A G E]   M A K E   R U L E S
	#
	# NAME: «dir.name»
	#
	# Generated by EMDW-MC
	#
	##############################################################################
	
	sp				:= $(sp).x
	dirstack_$(sp)	:= $(d)
	d				:= $(dir)
	
	«FOR subDir : dir.subDirectories»
	dir := 	$(d)/«subDir.name»
	include $(dir)/Rules.mk
	«ENDFOR»
	
	
	SOURCES_$(d)	:= $(wildcard $(d)/*.cc)
	OBJECTS_$(d)	:= $(SOURCES_$(d):%.cc=%.o)
	
	SOURCES	:= $(SOURCES) $(SOURCES_$(d))
	OBJECTS	:= $(OBJECTS) $(OBJECTS_$(d))
	
	d	:= $(dirstack_$(sp))
	sp	:= $(basename $(sp))
	'''
}
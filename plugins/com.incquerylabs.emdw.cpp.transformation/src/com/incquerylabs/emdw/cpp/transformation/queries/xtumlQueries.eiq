package com.incquerylabs.emdw.cpp.transformation.queries

import "http://www.eclipse.org/papyrusrt/xtumlrt/common"
import "http://www.eclipse.org/papyrusrt/xtumlrt/xtuml"
import "http://www.ericsson.com/xtumlrt/oopl/cpp"
import "http://www.ericsson.com/xtumlrt/oopl"

/**
 * XTUML queries
 */

pattern xtModel(xtModel : Model) {
	Model(xtModel);	
	// TODO: Add model validation constraints (e.g. name not null)
}

pattern xtClass(xtClass : XTClass) {
	XTClass(xtClass);
	neg find cppExternalBridge(xtClass, _);
}

pattern cppExternalBridge(
	xtClass : XTClass,
	cppBridge : CPPExternalBridge
) {
	CPPExternalBridge.xtClass(cppBridge, xtClass);
}

pattern xtModelEntities(
	xtModel : Model,
	entity : Entity
) {
	Model.entities(xtModel, entity);
} or {
	Model.packages(xtModel, xtPackage);
	Package.entities(xtPackage, entity);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageSubPackages+(xtPackage, subPackage);
	Package.entities(subPackage, entity);
}

pattern xtModelXTClasses(
	xtModel : Model,
	xtClass : XTClass
) {
	find xtModelEntities(xtModel, xtClass);
}

pattern xtComponentXTClasses(
	xtComponent : XTComponent,
	xtClass : XTClass
) {
	XTComponent.entities(xtComponent, xtClass);
}

pattern xtComponentAllXTClasses(
	xtComponent : XTComponent,
	xtClass : XTClass
) {
	find xtComponentXTClasses(xtComponent, xtClass);
} or {
	XTComponent.packages(xtComponent, xtPackage);
	Package.entities(xtPackage, xtClass);
} or {
	XTComponent.packages(xtComponent, xtPackage);
	find xtPackageSubPackages+(xtPackage, subPackage);
	Package.entities(subPackage, xtClass);
}


pattern xtComponentXTPackages(
	xtComponent : XTComponent,
	xtPackage : Package
) {
	XTComponent.packages(xtComponent, xtPackage);
}

pattern xtPackageSubPackages(
	xtPackage : Package,
	subPackage : Package
) {
	Package.packages(xtPackage, subPackage);
}

pattern xtPackageXTComponents(
	xtPackage : Package,
	xtComponent : XTComponent
) {
	Package.entities(xtPackage, xtComponent);
}

pattern xtPackageXTClasses(
	xtPackage : Package,
	xtClass : XTClass
) {
	Package.entities(xtPackage, xtClass);
}

pattern xtPackageInModel(xtPackage : Package, xtModel : Model, cppModel : CPPModel) {
	Model.packages(xtModel, xtPackage);
	find xtModelToCppModel(xtModel, cppModel);
}

pattern xtModelPackageInPackage(
	xtParentPackage : Package,
	xtChildPackage : Package,
	cppParentPackage : CPPPackage
) {
	Model(xtModel);
	Model.packages(xtModel, xtParentPackage);
	find xtPackageSubPackages(xtParentPackage, xtChildPackage);
	find cppPackages(xtParentPackage, cppParentPackage);
} or {
	Model(xtModel);
	Model.packages(xtModel, xtPackage);
	find xtPackageSubPackages+(xtPackage, xtParentPackage);
	find xtPackageSubPackages(xtParentPackage, xtChildPackage);
	find cppPackages(xtParentPackage, cppParentPackage);
}

pattern allXTComponentsOfXTComponent(
	xtComponent : XTComponent,
	subComponent : XTComponent
) {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageXTComponents(xtPackage, subComponent);
} or {
	find xtComponentXTPackages(xtComponent, xtPackage);
	find xtPackageSubPackages+(xtPackage, xtSubPackage);
	find xtPackageXTComponents(xtSubPackage, subComponent);
}

pattern allXTComponentsOfModel(
	xtModel : Model,
	xtComponent : XTComponent
) {
	Model.entities(xtModel, xtComponent);
} or {
	Model.entities(xtModel, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.packages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, xtComponent);
} or {
	Model.packages(xtModel, parent);
	find xtPackageSubPackages+(parent, xtPackage);
	find xtPackageXTComponents(xtPackage, component);
	find allXTComponentsOfXTComponent+(component, xtComponent);
} or {
	Model.packages(xtModel, xtPackage);
	find xtPackageXTComponents(xtPackage, parent);
	find allXTComponentsOfXTComponent+(parent, xtComponent);
}

pattern xtComponents(
	xtComponent : XTComponent
) {
	XTComponent(xtComponent);
}

pattern xtComponentInModel(
	xtModel : Model,
	cppModel : CPPModel,
	xtComponent : XTComponent
) {
	Model.entities(xtModel, xtComponent);
	find xtModelToCppModel(xtModel, cppModel);
}

pattern xtComponentInPackage (
	xtParentPackage : Package,
	xtComponent : XTComponent,
	cppParentPackage : CPPPackage
) {
	Model(xtModel);
	Model.packages(xtModel, xtParentPackage);
	find xtPackageXTComponents(xtParentPackage, xtComponent);
	find cppPackages(xtParentPackage, cppParentPackage);
} or {
	Model(xtModel);
	Model.packages(xtModel, xtPackage);
	find xtPackageSubPackages+(xtPackage, xtParentPackage);
	find xtPackageXTComponents(xtParentPackage, xtComponent);
	find cppPackages(xtParentPackage, cppParentPackage);
}

pattern stateMachineStates(
	stateMachine : StateMachine,
	state : State
) {
	StateMachine.top(stateMachine, top);
	find compositeStateSubStates+(top, state);
}

pattern compositeStateSubStates(
	compositeState : CompositeState,
	subState : State
) {
	CompositeState.substates(compositeState, subState);
}

pattern stateMachineTerminatePoints(
	stateMachine : StateMachine,
	terminatePoint : TerminatePoint
) {
	StateMachine.top(stateMachine, top);
	CompositeState.terminatepoint(top, terminatePoint);
} or {
	find stateMachineStates(stateMachine, compositeState);
	CompositeState.terminatepoint(compositeState, terminatePoint);
}

pattern structMember(
	structuredType : StructuredType,
	cppStructType : CPPStructType,
	attribute : Attribute
) {
	StructuredType.attributes(structuredType, attribute);
	CPPStructType.commonType(cppStructType, structuredType);
}

pattern enumerator(
	enumeration : Enumeration,
	cppEnumType : CPPEnumType,
	enumerationLiteral : EnumerationLiteral
) {
	Enumeration.literals(enumeration, enumerationLiteral);
	CPPEnumType.commonType(cppEnumType, enumeration);
}

pattern enumeration(
	enumeration : Enumeration,
	cppContainer : CPPQualifiedNamedElement
) {
	BaseContainer.typeDefinitions(xtContainer, typeDefinition);
	TypeDefinition.type(typeDefinition, enumeration);
	find cppContainer(xtContainer, cppContainer);
}

pattern structuredType(
	structuredType : StructuredType,
	cppContainer : CPPQualifiedNamedElement
) {
	BaseContainer.typeDefinitions(xtContainer, typeDefinition);
	TypeDefinition.type(typeDefinition, structuredType);
	find cppContainer(xtContainer, cppContainer);
}

pattern primitiveType(
	primitiveType : PrimitiveType,
	cppContainer : CPPQualifiedNamedElement
) {
	BaseContainer.typeDefinitions(xtContainer, typeDefinition);
	TypeDefinition.type(typeDefinition, primitiveType);
	find cppContainer(xtContainer, cppContainer);
}

/**
 * CPP Model queries
 */
pattern cppModel(cppModel : CPPModel) {
	CPPModel(cppModel);
}

pattern typeToOOPLType(
	commonType : Type,
	ooplType : OOPLDataType
) {
	OOPLDataType.commonType(ooplType, commonType);
}

pattern xtModelToCppModel(
	xtModel : Model,
	cppModel : CPPModel
) {
	CPPModel.commonModel(cppModel, xtModel);
}

pattern cppEntityAttributes(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	attribute : Attribute
) {
	find cppClasses(xtEntity, cppElement);
	Entity.attributes(xtEntity, attribute);
} or {
	find cppComponents(xtEntity, cppElement);
	Entity.attributes(xtEntity, attribute);
}

pattern cppEventAttributes(
	xtClassEvent : XTClassEvent,
	cppEvent : CPPEvent,
	attribute : Attribute
) {
	find cppEvents(xtClassEvent, cppEvent);
	XTClassEvent.attributes(xtClassEvent, attribute);
}

pattern cppSequenceType(
	cppElement : CPPQualifiedNamedElement,
	typedElement : CommonElement,
	cppSequence : CPPSequence,
	ooplType : OOPLDataType
) {
	CPPAttribute.unnamedSequenceType(cppElement, cppSequence);
	CPPAttribute.commonAttribute(cppElement, typedElement);
	Attribute.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
} or {
	CPPFormalParameter.unnamedSequenceType(cppElement, cppSequence);
	CPPFormalParameter.commonParameter(cppElement, typedElement);
	Parameter.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
} or {
	CPPReturnValue.unnamedSequenceType(cppElement, cppSequence);
	CPPReturnValue.commonTypedMultiplicityElement(cppElement, typedElement);
	TypedMultiplicityElement.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
} or {
	CPPStructMember.unnamedSequenceType(cppElement, cppSequence);
	CPPStructMember.commonMember(cppElement, typedElement);
	Attribute.type(typedElement, type);
	find typeToOOPLType(type, ooplType);
}

pattern cppEntityOperations(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	operation : Operation
) {
	find cppEntityAllOperations(xtEntity, cppElement, operation);
	Operation.name(operation, opName);
	check( opName != "destroy");
}

pattern cppEntityDestructor(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	operation : Operation
) {
	find cppEntityAllOperations(xtEntity, cppElement, operation);
	Operation.name(operation, opName);
	check( opName == "destroy");
}

pattern cppEntityAllOperations(
	xtEntity : Entity,
	cppElement : CPPQualifiedNamedElement,
	operation : Operation
) {
	find cppClasses(xtEntity, cppElement);
	Entity.operations(xtEntity, operation);
} or {
	find cppComponents(xtEntity, cppElement);
	Entity.operations(xtEntity, operation);
} or {
	find cppExternalBridge(xtEntity, cppElement);
	Entity.operations(xtEntity, operation);
}

pattern cppOperationParameter(
	operation : Operation,
	cppOperation : CPPOperation,
	parameter : Parameter
) {
	Operation.parameters(operation, parameter);
	CPPOperation.commonOperation(cppOperation, operation);
}

pattern cppOperationReturnValue(
	operation : Operation,
	cppOperation : CPPOperation,
	returnType : TypedMultiplicityElement
) {
	Operation.returnType(operation, returnType);
	CPPOperation.commonOperation(cppOperation, operation);
}

pattern cppContainer (
	xtContainer : BaseContainer,
	cppContainer : CPPQualifiedNamedElement
) {
	find cppPackages(xtContainer, cppContainer);
} or {
	find cppComponents(xtContainer, cppContainer);
}

pattern cppComponents(
	xtComponent : XTComponent,
	cppComponent : CPPComponent
) {
	CPPComponent.xtComponent(cppComponent, xtComponent);
}

pattern cppPackages(
	xtPackage : Package,
	cppPackage : CPPPackage
) {
	CPPPackage.commonPackage(cppPackage, xtPackage);
}

pattern cppComponentClasses(
	xtComponent : XTComponent,
	cppComponent : CPPComponent,
	xtClass : XTClass
){
	find xtClass(xtClass);
	find cppComponents(xtComponent, cppComponent);
	XTComponent.entities(xtComponent, xtClass);
}

pattern cppComponentPackages(
	xtComponent : XTComponent,
	cppComponent : CPPComponent,
	xtPackage : Package
) {
	find cppComponents(xtComponent, cppComponent);
	find xtComponentXTPackages(xtComponent,xtPackage);
}

pattern cppPackageClasses(
	xtPackage : Package,
	cppPackage : CPPPackage,
	xtClass : XTClass
){
	find xtClass(xtClass);
	find cppPackages(xtPackage, cppPackage);
	find xtPackageXTClasses(xtPackage, xtClass);
}

pattern cppPackagesInPackages(
	xtParentPackage : Package,
	cppParentPackage : CPPPackage,
	xtPackage : Package 
) {
	find cppPackages(xtParentPackage, cppParentPackage);
	neg find cppPackages(xtPackage, _);
	find xtPackageSubPackages(xtParentPackage, xtPackage);
}

pattern cppBridgesInComponent(
	xtClass : XTClass,
	xtComponent : XTComponent,
	cppExternalBridge : CPPExternalBridge,
	cppComponent : CPPComponent
) {
	find cppComponents(xtComponent, cppComponent);
	XTComponent.entities(xtComponent, xtClass);
	find cppExternalBridge(xtClass, cppExternalBridge);
}

pattern cppBridgesInPackage(
	xtClass : XTClass,
	xtPackage : Package,
	cppExternalBridge : CPPExternalBridge,
	cppPackage : CPPPackage
) {
	find cppPackages(xtPackage, cppPackage);
	find xtPackageXTClasses(xtPackage, xtClass);
	find cppExternalBridge(xtClass, cppExternalBridge);
}

pattern cppClasses(
	xtClass : XTClass,
	cppClass : CPPClass
) {
	CPPClass.xtClass(cppClass, xtClass);
}

pattern cppSuperClasses(
	cppClass : CPPClass,
	cppSuperClass : CPPClass
) {
	CPPClass.xtClass(cppClass, xtClass);
	XTClass.generalizations(xtClass, generalization);
	Generalization.^super(generalization, xtSuperClass);
	CPPClass.xtClass(cppSuperClass, xtSuperClass);
}

pattern cppEvents(
	xtEvent : XTEvent,
	cppEvent : CPPEvent
) {
	CPPEvent.xtEvent(cppEvent, xtEvent);
}

pattern cppComponentStateMachine(
	cppComponent : CPPComponent,
	stateMachine : StateMachine
) {
	CPPComponent.xtComponent(cppComponent, xtComponent);
	find xtComponentAllXTClasses(xtComponent, xtClass);
	XTClass.behaviour(xtClass, stateMachine);
}

pattern cppClassStateMachine(
	xtClass : XTClass,
	cppClass : CPPClass,
	statemachine : StateMachine
) {
	XTClass.behaviour(xtClass, statemachine);
	find cppClasses(xtClass, cppClass);
}

pattern cppClassStateMachineStates(
	xtClass : XTClass,
	cppClass : CPPClass,
	state : State
) {
	find cppClassStateMachine(xtClass, cppClass, statemachine);
	find stateMachineStates(statemachine, state);
}

pattern cppClassStateMachineTerminatePoints(
	xtClass : XTClass,
	cppClass : CPPClass,
	terminatePoint : TerminatePoint
) {
	find cppClassStateMachine(xtClass, cppClass, stateMachine);
	find stateMachineTerminatePoints(stateMachine, terminatePoint);
}

pattern cppClassStateMachineTransitions(
	xtClass : XTClass,
	cppClass : CPPClass,
	transition : Transition
) {
	find cppClassStateMachineStates(xtClass, cppClass, state);
	CompositeState.substates(compState, state);
	CompositeState.transitions(compState, transition);
}

pattern cppClassEvents(
	xtClass : XTClass,
	cppClass : CPPClass,
	event : XTEvent
) {
	find cppClasses(xtClass, cppClass);
	XTClass.events(xtClass, event);
}

pattern cppClassAssociations(
	xtClass: XTClass,
	cppClass: CPPClass,
	association: XTAssociation
) {
	find cppClasses(xtClass, cppClass);
	XTAssociation.source(association, xtClass);
}

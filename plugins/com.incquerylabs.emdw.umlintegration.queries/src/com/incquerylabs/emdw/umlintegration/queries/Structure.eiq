package com.incquerylabs.emdw.umlintegration.queries

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

//import "http://Papyrus/xtUMLProfile"
//import "http://Papyrus/ExecutableModelingProfile"

// disabled since there are issues with Maven compilation
//import "http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard" as standard

// Package

pattern xtPackage(umlPackage) {
	Package(umlPackage);
	neg find model(umlPackage);
	neg find profile(umlPackage);
}

pattern model(model) {
	Model(model);
}

private pattern profile(it) {
	Profile(it);
}

pattern namedDataType(dataType : DataType, name) {
	DataType.name(dataType, name);
}

pattern xtPackageInModel(model: Model, umlPackage: Package) {
	Model.packagedElement(model, umlPackage);
	find xtPackage(umlPackage);
}

pattern xtPackageInComponent(component: Component, umlPackage: Package) {
	Component.packagedElement(component, umlPackage);
	find xtPackage(umlPackage);
}

pattern xtPackageInPackage(parent: Package, child: Package) {
	Package.packagedElement(parent, child);
	find xtPackage(parent);
	find xtPackage(child);
}

// Component

pattern xtComponent(component: Component) {
	Component(component);
}

pattern xtComponentInModel(model: Model, component: Component) {
	Model.packagedElement(model, component);
	find xtComponent(component);
}

pattern xtComponentInPackage(umlPackage: Package, component: Component) {
	Package.packagedElement(umlPackage, component);
	find xtComponent(component);
	find xtPackage(umlPackage);
}

// Component children

pattern xtPort(component: Component, port: Port) {
	Component.ownedAttribute(component, port);
}

pattern capsulePart(component: Component, property: Property) {
	Component.ownedAttribute(component, property);
	neg find xtPort(component, property);
}

pattern connector(component: Component, connector: Connector) {
	Component.ownedConnector(component, connector);
}

pattern connectorEnd(connector: Connector, connectorEnd: ConnectorEnd) {
	Connector.end(connector, connectorEnd);
}

// Class

//pattern xtClass(cl : Class) {
//    XtClass.base_Class(_, cl);
//}

pattern xtClass(umlClass: Class) {
	Class(umlClass);
	// only accept "real" classes (in UML, it has lots of counterintuitive subclasses)
	neg find xtAssociationClass(umlClass);
	neg find behavior(umlClass);
	neg find xtComponent(umlClass);
	neg find node(umlClass);
	neg find stereotype(umlClass);
}

private pattern behavior(it) {
	Behavior(it);
}

private pattern node(it) {
	Node(it);
}

private pattern stereotype(it) {
	Stereotype(it);
}

pattern xtClassInModel(model: Model, umlClass: Class) {
	Model.packagedElement(model, umlClass);
	find xtClass(umlClass);
}

pattern xtClassInPackage(umlPackage: Package, umlClass: Class) {
	Package.packagedElement(umlPackage, umlClass);
	find xtClass(umlClass);
	find xtPackage(umlPackage);
}

pattern xtClassInComponent(component: Component, umlClass: Class) {
	Component.nestedClassifier(component, umlClass);
	find xtClass(umlClass);
} or {
	Component.packagedElement(component, umlClass);
	find xtClass(umlClass);
}

// Entity children

pattern operation(umlClass: Class, operation: Operation) {
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
}

pattern regularOperation(umlClass: Class, operation: Operation) {
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
	neg find constructorByName(umlClass, operation);
}

pattern constructorOperation(umlClass: Class, operation: Operation) {
// not checked since there are issues with Maven compilation
//	standard::Create.base_BehavioralFeature(_, operation);
	find constructorByName(umlClass, operation);
}

//pattern destructorOperation(umlClass: Class, operation: Operation) {
//// not checked since there are issues with Maven compilation
////	standard::Destroy.base_BehavioralFeature(_, operation);
//	find destructorByName(umlClass, operation);
//}

pattern constructorByName(umlClass : Class, operation : Operation){
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
	Class.name(umlClass, name);
	Operation.name(operation, name);
}

private pattern entity(umlClass: Class) {
	find xtClass(umlClass);
} or {
	find xtComponent(umlClass);
}

pattern attribute(umlClass: Class, property: Property) {
	find xtClass(umlClass);
	Class.ownedAttribute(umlClass, property);
}

pattern signalAttribute(umlSignal: Signal, property: Property) {
	find xtClassEvent(_class, umlSignal);
	Signal.ownedAttribute(umlSignal, property);
}

// MultiplicityElement

pattern multiplicityElement(multiplicityElement: MultiplicityElement, lowerValue: ValueSpecification, upperValue: ValueSpecification) {
	MultiplicityElement.lowerValue(multiplicityElement, lowerValue);
	MultiplicityElement.upperValue(multiplicityElement, upperValue);
}

// Parameter

pattern parameter(parameter) {
	find parameterInOperation(_, parameter);
}

pattern parameterInOperation(operation: Operation, parameter: Parameter) {
	find operation(_, operation);
	Operation.ownedParameter(operation, parameter);
	find notReturnParameter(parameter);
}

private pattern notReturnParameter(parameter) {
	Parameter.direction(parameter, direction);
	direction != ParameterDirectionKind::^return;
}

pattern returnParameterInOperation(operation: Operation, returnParameter: Parameter) {
	find regularOperation(_, operation);
	Operation.ownedParameter(operation, returnParameter);
	Parameter.direction(returnParameter, ParameterDirectionKind::^return);
}

pattern voidOperation(operation : Operation) {
	find regularOperation(_, operation);
	neg find returnParameterInOperation(operation, _);
}

// Relations

pattern xtAssociation(association: Association, sourceEnd: Property, targetEnd: Property) {
	count find associationOwnedEnd(association, _) == 2;
	Association.ownedEnd(association, sourceEnd);
	Association.ownedEnd(association, targetEnd);
	sourceEnd != targetEnd;
}

pattern associationOwnedEnd(association: Association, ownedEnd: Property) {
	Association.ownedEnd(association, ownedEnd);
}

pattern xtAssociationClass(associationClass) {
	AssociationClass(associationClass);
}

pattern xtGeneralization(subClass: Class, generalization: Generalization) {
	find xtClass(subClass);
	Class.generalization(subClass, generalization);
}

// Events

pattern xtClassEvent(umlClass: Class, signal: Signal) {
	Class.nestedClassifier(umlClass, signal);
	SignalEvent.signal(_, signal);
	
}

pattern xtClassEventGeneralization(
	signal: Signal,
	superSignal: Signal
) {
	Class.nestedClassifier(_class1, signal);
	Class.nestedClassifier(_class2, superSignal);
	Signal.generalization(signal, generalization);
	Generalization.general(generalization, superSignal);
}

// Types

pattern typeDefinitionInPackage(umlPackage: Package, type : uml::Type) {
	find typeDefinition(type);
	Package.packagedElement(umlPackage, type);
}

pattern typeDefinitionInComponent(umlComponent: Component, type : uml::Type) {
	find typeDefinition(type);
	Component.packagedElement(umlComponent, type);
}

pattern typeDefinition(type: uml::Type) {
	find primitiveType(type);
} or {
	find structType(type);
} or {
	find enumeration(type);
}

pattern primitiveType(primitiveType: PrimitiveType) {
	find packagedElement(primitiveType);
}

pattern enumeration(enumeration: Enumeration) {
	find packagedElement(enumeration);
}

pattern enumerationLiteral(
	enumeration : Enumeration,
	enumerationLiteral : EnumerationLiteral
) {
	find enumeration(enumeration);
	Enumeration.ownedLiteral(enumeration, enumerationLiteral);
}

pattern structType(structType: DataType) {
	find packagedElement(structType);
	neg find primitiveType(structType);
	neg find enumeration(structType);
}

pattern structTypeInComponent(
	structType : DataType,
	umlComponent : Component
) {
	Component.packagedElement(umlComponent, structType);
}

pattern structTypeInPackage(
	structType : DataType,
	umlPackage : Package
) {
	Package.packagedElement(umlPackage, structType);
}

pattern structMember(structType: DataType, member: Property) {
	DataType.ownedAttribute(structType, member);
}

private pattern packagedElement(
	packagedElement : PackageableElement
) {
	find elementInPackage(_umlPackage, packagedElement);
} or {
	find elementInComponent(_umlComponent, packagedElement);
}

private pattern elementInComponent(
	component : Component,
	packageableElement : PackageableElement
) {
	Component.packagedElement(component, packageableElement);
}

private pattern elementInPackage(
	umlPackage : Package,
	packageableElement: PackageableElement
) {
	find xtPackage(umlPackage);
	Package.packagedElement(umlPackage, packageableElement);
}

/*****************************************************************************
 * Copyright (c) 2013, 2014 CEA LIST.
 *
 *    
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  IJI - Initial implementation
 * 
 *****************************************************************************/
grammar com.incquerylabs.uml.ralf.ReducedAlfLanguage hidden (WS, ML_COMMENT, SL_COMMENT)

generate reducedAlfLanguage "http://www.incquerylabs.com/uml/ralf/ReducedAlfLanguage"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/5.0.0/UML" as uml

/**
 * TOP LEVEL ELEMENT
 */
Statements :
    ( statement += Statement )*
;

/***************
* NAMES        *
***************/
Name :
  ID | UNRESTRICTED_NAME
;

QualifiedName :
    Name ( '::' Name )*
;

/***************
* EXPRESSIONS *
***************/
Expression :
  AssignmentExpression | ConditionalExpression 
;

/* PRIMARY EXPRESSIONS */

PrimaryExpression returns Expression :
  BaseExpression
  ( {FeatureInvocationExpression.context = current} ('.'| isStatic ?= '::') operation = [uml::Operation|Name] parameters = Tuple |
    {FilterExpression.context = current} operator=FilterCallCharacter 'filter(' declaration = FilterVariableDeclaration lambdaOperator=LambdaCharacter expression = Expression ')' |
    {PropertyAccessExpression.context = current} '.' property = [uml::Property|Name]  | 
    {AssociationAccessExpression.context = current} '->' association = [uml::Property|Name]  | 
//    {ExtentOrExpression.nonNameExpression = current} '->' 
//      ( {SequenceOperationExpression.primary = current} operation = [uml::Operation|QualifiedName] tuple = Tuple
//      // CHANGE: Made SequenceExpansionExpression concrete.
//      | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
//      ) | 
    {SequenceAccessExpression.primary = current} index = Index
  )*
;

BaseExpression returns Expression : 
    LiteralExpression |
    CollectionLiteralExpression |
    ThisExpression |
    SuperInvocationExpression |
    InstanceCreationOrSequenceConstructionExpression |
    InstanceDeletionExpression |
    ClassExtentExpression |
    LinkOperationExpression |
    NullExpression |
//  SequenceOperationOrReductionOrExpansionExpression |
//    BehaviorInvocationExpression |
    NameExpression | 
    ParenthesizedExpression 
;

/* LITERAL EXPRESSIONS */
LiteralExpression returns LiteralExpression :
    BooleanLiteralExpression |
    NaturalLiteralExpression |
    RealLiteralExpression |
    UnboundedLiteralExpression |
    StringLiteralExpression
;

BooleanLiteralExpression :
    value = BOOLEAN_VALUE
;

NaturalLiteralExpression :
    value = NATURAL_VALUE
;

RealLiteralExpression :
    value = REAL_VALUE
;

UnboundedLiteralExpression :
    {UnboundedLiteralExpression} value = '*'
;

StringLiteralExpression :
    value = STRING
;

/* Name EXPRESSIONS */
NameExpression :
    reference = [uml::NamedElement|QualifiedName]
;

/* THIS EXPRESSIONS */
ThisExpression returns Expression : 
    {FeatureInvocationExpression} 'this' tuple = Tuple | 
    {ThisExpression} 'this'
;

/* PARENTHESIZED EXPRESSIONS */
ParenthesizedExpression returns Expression : 
    '(' Expression ')'
;

/* PROPERTY ACCESS EXPRESSIONS */
// At this point in case of affix and postfix ++/-- operators, only variable names and properties can be used
// Property chaining is not supported at this time
// TODO: use primary expressions and filter using expression types
PropertyAccessExpression:
	context = PrimaryExpression '.' property = [uml::Property|Name]
;


//FeatureReference :
//  expression = PrimaryExpression // '.' nameBinding = NameBinding
//;

//FeatureTargetExpression returns Expression :
//  NonNamePrimaryExpression | NameTargetExpression
//;
//
//NameTargetExpression returns NameExpression :
//  name = ColonQualifiedName
//;

/* INVOCATION EXPRESSIONS */
//
//BehaviorInvocationExpression :
//  target = [uml::Behavior|QualifiedName] tuple = Tuple
//;

Tuple returns Tuple: 
    {ExpressionList} '(' ')'
    |
    '(' ( NamedTupleExpressionList | ExpressionList ) ')'
;

ExpressionList:
    {ExpressionList} ( expressions += Expression (',' expressions += Expression)* )?
;

NamedTupleExpressionList returns NamedTuple : 
    expressions += NamedExpression ( ',' expressions += NamedExpression )*
;

NamedExpression : 
    name = Name '=>' expression = Expression
;

SuperInvocationExpression :
    'super' ( '.' target = [uml::Operation|QualifiedName])? tuple = Tuple
;

/* INSTANCE CREATION EXPRESSIONS */
InstanceCreationOrSequenceConstructionExpression returns Expression : 
    {InstanceCreationExpression} 'new' instance = [uml::Classifier|QualifiedName] tuple = Tuple
;

/* LINK OPERATION EXPRESSIONS */
LinkOperationExpression :
  association = [uml::Association|QualifiedName] '::' operation = LinkOperation tuple = Tuple
;

enum LinkOperation :
link = 'link' | unlink = 'unlink'
;

/* CLASS EXTENT EXPRESSIONS */
ClassExtentExpression :
  class = [uml::Class|QualifiedName] '::' 'instances' '(' ')'
;

/* NULL EXPRESSION */
NullExpression:
    {NullExpression} 'null'
;

/* SEQUENCE CONSTRUCTION EXPRESSIONS */
CollectionLiteralExpression returns CollectionLiteralExpression:
//    {RangeCollectionExpression}
//    collectionType = CollectionType '<' typeDeclaration = TypeDeclaration '>' '{' ( range = SequenceRange)? '}' |
    {ElementCollectionExpression}
    (collectionType = CollectionType '<' typeDeclaration = TypeDeclaration '>')? '{' ( elements = ExpressionList )? '}'
;

enum CollectionType:
     set = 'set' | bag = 'bag' | sequence = 'sequence'
;

TypeDeclaration: //TODO define collection types as well
     /*isAny ?= 'any' | */type = [uml::Type|QualifiedName]
;

//SequenceRange :
//  rangeLower = Expression '..' rangeUpper = Expression
//;

/* SEQUENCE ACCESS EXPRESSIONS */
Index returns Expression : 
    '[' Expression ']'
;


/* FILTER EXPRESSION */
    
FilterVariableDeclaration returns Variable: 
	{FilterVariable} (type = TypeDeclaration)? name = Name 
;

enum LambdaCharacter :
	pipe = '|' | arrow = '->' | boldArrow = '=>' | doubleArrow = '-->' | doubleBold = '==>'
;

enum FilterCallCharacter :
	dot = '.' | colon = '::' |  arrow = '->' | boldArrow = '=>' | doubleArrow = '-->' | doubleBold = '==>'
;

/* SEQUENCE OPERATION, REDUCTION AND EXPANSION EXPRESSIONS */
// NOTE: This only covers the case when the primary is a class extent shorthand.
//SequenceOperationOrReductionOrExpansionExpression returns Expression :
//  {ExtentOrExpression} name = /*PotentiallyAmbiguous*/QualifiedName '->' 
//    ( {SequenceOperationExpression.primary = current} operation = [uml::Operation|QualifiedName] tuple = Tuple 
//    // CHANGE: Made SequenceExpansionExpression concrete.
//    | {SequenceExpansionExpression.primary = current} operation = ID variable = Name '(' argument = Expression ')'
//    )
//;
    
/* INCREMENT OR DECREMENT EXPRESSIONS */
PrefixExpression returns Expression : 
  // CHANGE: Added operator to IncrementOrDecrementExpression in the metamodel.
    {PrefixExpression}
    operator = AffixOperator operand = LeftHandSide
;

enum AffixOperator :
increment = '++' | decrement = '--'
;


/* UNARY EXPRESSIONS */
UnaryExpression returns Expression :
  PostfixOrCastExpression | NonPostfixNonCastUnaryExpression | PrefixExpression
;

PostfixOrCastExpression returns Expression :
  PostfixExpression | CastExpression | PrimaryExpression
;

PostfixExpression returns Expression :
  {PostfixExpression}
  operand = LeftHandSide operator = AffixOperator
;

NonPostfixNonCastUnaryExpression returns Expression : 
    //PrefixExpression | 
    NumericUnaryExpression | 
    BooleanUnaryExpression  | 
    BitStringUnaryExpression    | 
    IsolationExpression
;

BooleanUnaryExpression : 
    operator = '!' operand = UnaryExpression
;

BitStringUnaryExpression : 
    operator = '~' operand = UnaryExpression
;

NumericUnaryExpression : 
    operator = NumericUnaryOperator operand = (PostfixOrCastExpression | NonPostfixNonCastUnaryExpression) |
    operator = NumericUnaryOperator '('operand = PrefixExpression ')'
;

enum NumericUnaryOperator :
plus = '+' | minus = '-'
;

IsolationExpression : 
    operator='$' operand = UnaryExpression
;

CastExpression : 
  '(' type = TypeDeclaration ')' operand = CastCompletion
;

CastCompletion returns Expression : 
    PostfixOrCastExpression | 
    BooleanUnaryExpression  | 
    BitStringUnaryExpression    | 
    IsolationExpression
;

/* ARITHMETIC EXPRESSIONS */
MultiplicativeExpression returns Expression : 
    UnaryExpression 
    ( {ArithmeticExpression.operand1 = current} operator = MultiplicativeOperator operand2 = UnaryExpression )*
;

MultiplicativeOperator:
	'*' | '/' | '%'
;


AdditiveExpression returns Expression : 
    MultiplicativeExpression
    ( {ArithmeticExpression.operand1 = current} operator = AdditiveOperator operand2 = MultiplicativeExpression )*
;

AdditiveOperator:
	'+' | '-'
;


/* SHIFT EXPRESSIONS */

ShiftExpression returns Expression : 
    AdditiveExpression
    ( {ShiftExpression.operand1 = current} operator = ShiftOperator operand2 = AdditiveExpression )*
;

enum ShiftOperator :
 right = '>>' | left = '<<' | triple = '>>>'
;


/* RELATIONAL EXPRESSIONS */
RelationalExpression returns Expression :
    ShiftExpression 
    ( {RelationalExpression.operand1 = current} operator = RelationalOperator operand2 = ShiftExpression )?
;

enum RelationalOperator :
 greaterThan = '>' | lesserThan = '<' | greaterOrEquals = '>=' | lesserOrEquals = '<='
;

/* CLASSIFICATION EXPRESSIONS */
ClassificationExpression returns Expression : 
    RelationalExpression 
  ( {ClassificationExpression.operand = current} operator = ClassificationOperator type = [uml::Class|QualifiedName] )?
;

enum ClassificationOperator :
 instanceof = 'instanceof' | hastype = 'hastype'
;

/* EQUALITY EXPRESSIONS */
EqualityExpression returns Expression : 
    ClassificationExpression 
  ( {EqualityExpression.operand1 = current} operator = EqualityOperator operand2 = ClassificationExpression )*
;

enum EqualityOperator :
 equals = '==' | notEquals = '!='
;

/* LOGICAL EXPRESSIONS */
AndExpression returns Expression : 
    EqualityExpression 
  ( {LogicalExpression.operand1 = current} operator = '&' operand2 = EqualityExpression )*
;

ExclusiveOrExpression returns Expression :
  AndExpression
  ( {LogicalExpression.operand1 = current} operator = '^' operand2 = AndExpression )*
;

InclusiveOrExpression returns Expression : 
    ExclusiveOrExpression
    ( {LogicalExpression.operand1 = current} operator = '|' operand2 = ExclusiveOrExpression )*
;

/* CONDITIONAL LOGICAL EXPRESSIONS */
ConditionalAndExpression returns Expression : 
    InclusiveOrExpression
    ( {ConditionalLogicalExpression.operand1 = current} operator = '&&' operand2 = InclusiveOrExpression )*
;

ConditionalOrExpression returns Expression :
    ConditionalAndExpression
    ( {ConditionalLogicalExpression.operand1 = current} operator = '||' operand2 = ConditionalAndExpression )*
;

/* CONDITIONAL-TEST EXPRESSIONS */
ConditionalExpression returns Expression : 
    ConditionalOrExpression
  ( {ConditionalTestExpression.operand1 = current} 
    '?' operand2 = Expression ':' operand3 = ConditionalExpression 
  )?
;

/* ASSIGNMENT EXPRESSIONS */
AssignmentExpression returns AssignmentExpression :
  leftHandSide = LeftHandSide operator = AssignmentOperator rightHandSide = Expression
;

LeftHandSide :
  NameLeftHandSide | 
  FeatureLeftHandSide // ( index = Index )? | //TODO Indexing
//  "(" LeftHandSide ")"
;

NameLeftHandSide :
  // CHANGE: Moved the index property from LeftHandSide down to just NameLeftHandSide.
  expression = NameExpression ( index = Index )? 
;

FeatureLeftHandSide :
  // CHANGE: Replaced the feature property of a FeatureLeftHandSide with expression.
  expression = PropertyAccessExpression
;

enum AssignmentOperator :
 assign = '=' | 
 incrementAssign = '+=' | 
 decrementAssign = '-=' | 
 multiplyAssign = '*=' | 
 divisionAssign = '/=' | 
 moduloAssign = '%=' | 
 andAssign = '&=' | 
 orAssign = '|=' |
 xorAssign = '^=' |
 leftShiftAssign = '<<=' |
 rightShiftAssign = '>>=' | 
 tripleShiftAssign = '>>>='
;


/**************
 * STATEMENTS *
 **************/
Statement : 
    SimpleStatement ';'|
    BlockStatement |
    IfStatement |
    SwitchStatement |
    WhileStatement |
    ForStatement |
    ForEachStatement |
    DoStatement |
    BreakStatement |
    ReturnStatement |
    ClassifyStatement |
    SendSignalStatement 
;

SimpleStatement:
    (
      LocalNameDeclarationStatement |
      ExpressionStatement |  
      EmptyStatement
    )
;

/* BLOCK */
Block : 
    {Block} '{' ( statement += Statement )* '}'
;

/* BLOCK STATEMENTS */
BlockStatement :
    Block
;

/* EMPTY STATEMENTS */
EmptyStatement :
  {EmptyStatement}
;


MultiplicityIndicator : 
    '[' ']'
;

VariableDeclaration returns uml::NamedElement : 
   {Variable} type = TypeDeclaration hasMultiplicity ?= MultiplicityIndicator? name = Name     
;

/* LOCAL NAME DECLARATION STATEMENTS */
LocalNameDeclarationStatement : 
    //TODO test optional initialization
    variable = VariableDeclaration ('=' expression = InitializationExpression)?
;

InitializationExpression returns Expression :
    Expression
| InstanceInitializationExpression
;

InstanceInitializationExpression returns InstanceCreationExpression : 
    'new' instance = [uml::Classifier|QualifiedName] tuple = Tuple
;

InstanceDeletionExpression returns Expression : 
    {InstanceDeletionExpression}
    'delete' reference = Expression
;

/* EXPRESSION STATEMENTS */
ExpressionStatement :
  expression = Expression
;

/* IF STATEMENTS */
IfStatement : 
    'if' nonFinalClauses += ConcurrentClauses ( 'else' 'if' nonFinalClauses += ConcurrentClauses )*
    ( 'else' finalClause = Block )?
;

ConcurrentClauses : 
    clause += NonFinalClause ( 'or' 'if' clause += NonFinalClause )*
;

NonFinalClause : 
    '(' condition = Expression ')' body = Block
;

/* SWITCH STATEMENTS */
SwitchStatement : 
    'switch' '(' expression = Expression ')'
    '{' ( nonDefaultClause += SwitchClause )*
    ( defaultClause = SwitchDefaultClause )? '}'
;

SwitchClause :
    case += SwitchCase ( case += SwitchCase )*
    block = NonEmptyStatementSequence
;

SwitchCase returns Expression : 
    'case' Expression ':'
;

SwitchDefaultClause returns Block : 
    'default' ':' NonEmptyStatementSequence
;

NonEmptyStatementSequence returns Block : 
    ( statement += Statement )+
;

/* WHILE STATEMENTS */
WhileStatement : 
    'while' '(' condition = Expression ')' body = Block
;

/* DO STATEMENTS */
DoStatement : 
    'do' body = Block 'while' '(' condition = Expression ')' ';'
;

/* FOR STATEMENTS */
ForStatement :
    'for' '(' 
        initialization = SimpleStatement ';'
        condition = Expression ';'
        update = SimpleStatement
    ')'
    body = Block
;

ForEachStatement : 
    'for' '(' variableDefinition = LoopVariableDefinition 'in' expression = Expression')' 
    body = Block
;

LoopVariableDefinition returns Variable: 
     {LoopVariable} 
     (type = TypeDeclaration)? name = Name
;

/* BREAK STATEMENTS */
BreakStatement : 
    {BreakStatement} 
    'break' ';'
;

/* RETURN STATEMENTS */
ReturnStatement : 
    {ReturnStatement}
    'return' ( expression = Expression )? ';'
;

/* CLASSIFY STATEMENTS */
ClassifyStatement :
    'classify' expression = Expression 
   (
     fromList = ClassificationFromClause ( toList = ClassificationToClause )? |
     ( isReclassifyAll ?= ReclassifyAllClause )? toList = ClassificationToClause
   )
   ';'
;

ClassificationFromClause returns QualifiedNameList :
    'from' QualifiedNameList
;

ClassificationToClause returns QualifiedNameList : 
    'to' QualifiedNameList
;

ReclassifyAllClause : 
    'from' '*'
;

QualifiedNameList : 
    name += QualifiedName ( ',' name += QualifiedName )*
;

/****************
* Send statement
*****************/
SendSignalStatement:
    {SendSignalStatement}
    'send' signal = Expression 'to' target = Expression ';'
;


/****************
* Terminals
*****************/
terminal BOOLEAN_VALUE : 'true' | 'false' ;

terminal NATURAL_VALUE :
    ('0' | '1'..'9' (('_')? '0'..'9')*) | //DECIMAL 
    (('0b' | '0B') '0'..'1' (('_')? '0'..'1')*) | // BINARY
    (('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')  (('_')? ('0'..'9'|'a'..'f'|'A'..'F'))*) | // HEX
    ('0' ('_')? '0'..'7' (('_')? '0'..'7')*) // OCT
;

terminal REAL_VALUE:
    ('0' | '1'..'9' (('_')? '0'..'9')*) '.' '0'..'9' (('_')? '0'..'9')*
;

terminal ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ;
terminal UNRESTRICTED_NAME : '\'' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'\'') )* '\'' ;

terminal STRING : '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|"'"|'\\') | !('\\'|'"') )* '"' ;

terminal ML_COMMENT : '/*' !('*' | '@') -> '*/';
terminal SL_COMMENT : '//' (!('@'|'\n'|'\r') !('\n'|'\r')*)? ('\r'? '\n')?;

terminal WS : (' '|'\t'|'\r'|'\n')+;
